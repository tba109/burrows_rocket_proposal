/*
 * Tyler Anderson Wed Apr 20 12:18:50 EDT 2011
 * For setting a checking the flag interface to the FPGA's
 */
#ifndef _TCD2_FLAGS_H_
#define _TCD2_FLAGS_H_

////////////////////////////////////////////////////////////////////////////
// Set the IO's for the flags
// Set up the PORTA IO's
// PORTA7 : evt_collectn. OUT: Low indiciates we should process an event, 
//                             high indicates the stacks should clear the 
//                             master trigger
// PORTA6 : evt_pendn.    IN : Low indicates there is an event pending
// PORTA5 : flushn.       OUT: Low flushes all the FPGA buffers asynchronously and
//                             returns state machines to their IDLE states
// PORTA4 : ol_flushn.    OUT: Low flushes the overlord asynchronously and returns all
//                             state machines to their idle states
// PORTA3 : soft_resetn.  OUT: Low resets all FPGAs to their power on state, so that
//                             they will reinitialize.
// PORTA2 : rsp_timeoutn  OUT: Set this when reading a response if the GPIF engine
//                             has not finished in a given amount of time (probably 20us)
// PORTA1 : evt_timeoutn  OUT: Set this when reading an event if the GPIF engine
//                             has not finished in a given amount of time (probably 200us)
// PORTA0 : Unused.       OUT: Not in use
/////////////////////////////////////////////////////////////////////////////
void init_flags();

////////////////////////////////////////////////////////////////////////////
// Flush the FPGA buffers and return their state machines to IDLE
////////////////////////////////////////////////////////////////////////////
void flushn();

////////////////////////////////////////////////////////////////////////////
// Flush the overlord buffers and return their state machines to IDLE
////////////////////////////////////////////////////////////////////////////
void ol_flushn();

////////////////////////////////////////////////////////////////////////////
// Perform a soft reset. The FPGA's will initialize their HV's and THR's,
//   then go to IDLE
////////////////////////////////////////////////////////////////////////////
void soft_resetn();

////////////////////////////////////////////////////////////////////////////
// Return the value of evt_pendn() flag
////////////////////////////////////////////////////////////////////////////
unsigned char evt_pendn();

////////////////////////////////////////////////////////////////////////////
// Change the value of evt_collectn
////////////////////////////////////////////////////////////////////////////
void change_evt_collectn(unsigned char);

////////////////////////////////////////////////////////////////////////////
// Change response timeout
////////////////////////////////////////////////////////////////////////////
void change_rsp_timeoutn(unsigned char);

////////////////////////////////////////////////////////////////////////////
// Change event timeout
////////////////////////////////////////////////////////////////////////////
void change_evt_timeoutn(unsigned char);

#endif
